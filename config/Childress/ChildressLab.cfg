#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    servername: localhost
    remoteport: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    mynicard:
        module.Class: 'ni_card_USB6229.NICard'
        clock_channel: '/Dev1/Ctr0'
        counter_channel: '/Dev1/Ctr1'
        photon_source: '/Dev1/PFI7'
        pd1: '/Dev1/ai23'
        scanner_x_ao: '/Dev1/ao3'
        scanner_y_ao: '/Dev1/ao1'
        scanner_z_ao: '/Dev1/ao2'
        scanner_counter_channel: '/Dev1/ai0'
        cavity_ao: '/Dev1/ao0'
        counting_edge_rising: True
        clock_frequency: 100
        x_voltage_range: [-3.75, 0]
        y_voltage_range: [-3.75, 0]
        z_voltage_range: [-3.75, 0]
        cavity_voltage_range: [-3.75, 0]
        x_range: [0, 20e-6]
        y_range: [0, 20e-6]
        z_range: [0, 20e-6]
        cavity_range: [0, 20e-6]

    scope:
        module.Class: 'scope_tektronixDPO2014B.Scope'

    simpledatadummy:
        module.Class: 'simple_data_dummy.SimpleDummy'

    mykrowave:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20
        mock: True

    mydummyscanner:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic'

    mynicounter:
        module.Class: 'slow_counter_dummy.SlowCounterDummy'
        clock_channel: '/Dev1/Ctr0'
        clock_frequency: 100
        counter_channel: '/Dev1/Ctr1'
        photon_source: '/Dev1/PFI13'
        count_distribution: 'dark_bright_poisson'
        remoteaccess: True

    mydummycounter:
        module.Class: 'slow_counter_dummy.SlowCounterDummy'
        source_channels: 4
        clock_frequency: 100
        count_distribution: 'dark_bright_poisson'
        counter_channel: '/Dev1/Ctr1'
        remoteaccess: True

    myscopedummy:
        module.Class: 'scope_dummy.ScopeDummy'

    mydummyodmrcounter:
        module.Class: 'odmr_counter_dummy.ODMRCounterDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic'

    mydummyfastcounter:
        module.Class: 'fast_counter_dummy.FastCounterDummy'
        #choose_trace: True
        #gated: False

    mydummypulser:
        module.Class: 'pulser_dummy.PulserDummy'

    mydummywavemeter:
        module.Class: 'wavemeter_dummy.WavemeterDummy'
        measurement_timing: 10

    mydummyswitch1:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    mydummyswitch2:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    myspectrometer:
        module.Class: 'spectrometer.spectrometer_dummy.SpectrometerInterfaceDummy'
        connect:
            fitlogic: 'fitlogic'

    motordummy:
        module.Class: 'motor.motor_dummy.MotorDummy'

    magnetdummy:
        module.Class: 'magnet.magnet_dummy.MagnetDummy'

    processdummy:
        module.Class: 'process_dummy.ProcessDummy'

    laserdummy:
        module.Class: 'laser.simple_laser_dummy.SimpleLaserDummy'

logic:

    cavitylogic:
        module.Class: 'cavity_logic.CavityLogic'
        connect:
            nicard: 'mynicard'
            scope: 'scope'
            savelogic: 'savelogic'

    scopelogic:
        module.Class: 'scope_logic.ScopeLogic'
        connect:
            scope: 'myscopedummy'
            savelogic: 'savelogic'

    simpledatalogic:
        module.Class: 'simple_data_logic.SimpleDataLogic'
        connect:
            simpledata: 'simpledatadummy'

    softpid:
        module.Class: 'software_pid_controller.SoftPIDController'
        connect:
            process: 'processdummy'
            control: 'processdummy'

    pidlogic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            controller: 'softpid'
            savelogic: 'savelogic'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    pulsedmasterlogic:
        module.Class: 'pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'sequence_generator_logic.SequenceGeneratorLogic'

    pulseextractionlogic:
        module.Class: 'pulse_extraction_logic.PulseExtractionLogic'

    pulseanalysislogic:
        module.Class: 'pulse_analysis_logic.PulseAnalysisLogic'

    pulsedmeasurementlogic:
        module.Class: 'pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: 'mydummyfastcounter'
            pulseanalysislogic: 'pulseanalysislogic'
            pulseextractionlogic: 'pulseextractionlogic'
            pulsegenerator: 'mydummypulser'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'mykrowave'

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mynicard'
            savelogic: 'savelogic'

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mydummycounter'
            savelogic: 'savelogic'

    wavemeterloggerlogic:
        module.Class: 'wavemeter_logger_logic.WavemeterLoggerLogic'
        logic_acquisition_timing: 20
        logic_update_timing: 100
        connect:
            wavemeter1: 'mydummywavemeter'
            savelogic: 'savelogic'
            counterlogic: 'counterlogic'

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch1: 'mydummyswitch1'
            switch2: 'mydummyswitch2'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'mynicard'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'mynicard'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimizer1: 'optimizerlogic'
            savelogic: 'savelogic'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'mydummyodmrcounter'
            fitlogic: 'fitlogic'
            microwave1: 'mykrowave'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]

    automationlogic:
        module.Class: 'automation.AutomationLogic'
        connect:
            taskrunner: 'tasklogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True


    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    qdplotlogic:
        module.Class: 'qdplot_logic.QdplotLogic'
        connect:
            savelogic: 'savelogic'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    cavity:
        module.Class: cavitygui.cavitygui.CavityGui
        connect:
            cavitylogic1: 'cavitylogic'
            savelogic: 'savelogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanagerlogic'
            confocallogic1: 'scannerlogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'

    notebookgui:
        module.Class: 'notebook.notebookgui.NotebookWebView'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic'

    simpledata:
        module.Class: 'simpledatagui.simpledatagui.SimpleDataGui'
        connect:
            simplelogic: 'simpledatalogic'

    gatedcounter:
        module.Class: 'gated_counter.gated_counter_gui.GatedCounterGui'
        connect:
            gatedcounterlogic1: 'gatedcounterlogic'
            traceanalysislogic1: 'trace_analysis_logic'